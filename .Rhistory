fraction <- sum(is.na(validBaselineTadpole$PTAU)/nrow(validBaselineTadpole))
pander::pander(c(col=ncol(validBaselineTadpole),row=nrow(validBaselineTadpole)))
pander::pander(table(validBaselineTadpole$DX))
LeftFields <- TADPOLE_D1_D2_Dict_LR$LFN
names(LeftFields) <- LeftFields
LeftFields <- LeftFields[LeftFields %in% colnames(validBaselineTadpole)]
RightFields <- TADPOLE_D1_D2_Dict_LR$RFN
names(RightFields) <- RightFields
RightFields <- RightFields[RightFields %in% colnames(validBaselineTadpole)]
## Normalize to ICV
validBaselineTadpole$Ventricles=1000.0*validBaselineTadpole$Ventricles/validBaselineTadpole$ICV
validBaselineTadpole$Hippocampus=1000.0*validBaselineTadpole$Hippocampus/validBaselineTadpole$ICV
validBaselineTadpole$WholeBrain=1000.0*validBaselineTadpole$WholeBrain/validBaselineTadpole$ICV
validBaselineTadpole$Entorhinal=1000.0*validBaselineTadpole$Entorhinal/validBaselineTadpole$ICV
validBaselineTadpole$Fusiform=1000.0*validBaselineTadpole$Fusiform/validBaselineTadpole$ICV
validBaselineTadpole$MidTemp=1000.0*validBaselineTadpole$MidTemp/validBaselineTadpole$ICV
leftData <- 1000.0*validBaselineTadpole[,LeftFields]/validBaselineTadpole$ICV
RightData <- 1000.0*validBaselineTadpole[,RightFields]/validBaselineTadpole$ICV
## get mean and relative difference
meanLeftRight <- (leftData + RightData)/2
difLeftRight <- abs(leftData - RightData)
reldifLeftRight <- 100.0*difLeftRight/meanLeftRight
colnames(meanLeftRight) <- paste("M",colnames(meanLeftRight),sep="_")
colnames(difLeftRight) <- paste("D",colnames(difLeftRight),sep="_")
colnames(reldifLeftRight) <- paste("RD",colnames(reldifLeftRight),sep="_")
validBaselineTadpole <- validBaselineTadpole[,!(colnames(validBaselineTadpole) %in%
c(LeftFields,RightFields))]
validBaselineTadpole <- cbind(validBaselineTadpole,meanLeftRight,reldifLeftRight)
## Remove columns with too many NA more than %35 of NA
nacount <- apply(is.na(validBaselineTadpole),2,sum)/nrow(validBaselineTadpole) <= fraction
sum(nacount)
length(nacount)
diagnose <- validBaselineTadpole$DX
pander::pander(table(diagnose))
validBaselineTadpole <- validBaselineTadpole[,nacount]
## Remove character columns
ischar <- sapply(validBaselineTadpole,class) == "character"
sum(ischar)
validBaselineTadpole <- validBaselineTadpole[,!ischar]
## Place back diagnose
validBaselineTadpole$DX <- diagnose
pander::pander(table(validBaselineTadpole$DX))
pander::pander(summary(validBaselineTadpole$APOE4))
pander::pander(summary(validBaselineTadpole$ABETA))
pander::pander(summary(validBaselineTadpole$TAU))
pander::pander(summary(validBaselineTadpole$PTAU))
pander::pander(c(col=ncol(validBaselineTadpole),row=nrow(validBaselineTadpole)))
#subMCI <- subset(validBaselineTadpole,DX=="MCI")
#apply(is.na(subMCI),2,sum)
validBaselineTadpole$Hippocampus <- NULL
validBaselineTadpole$Entorhinal <- NULL
validBaselineTadpole$Fusiform <- NULL
validBaselineTadpole$MidTemp <- NULL
validBaselineTadpole <- validBaselineTadpole[complete.cases(validBaselineTadpole),]
ischar <- sapply(validBaselineTadpole,class) == "character"
validBaselineTadpole[,!ischar] <- sapply(validBaselineTadpole[,!ischar],as.numeric)
pander::pander(table(validBaselineTadpole$DX))
pander::pander(summary(validBaselineTadpole$APOE4))
pander::pander(summary(validBaselineTadpole$ABETA))
pander::pander(summary(validBaselineTadpole$TAU))
pander::pander(summary(validBaselineTadpole$PTAU))
pander::pander(c(col=ncol(validBaselineTadpole),row=nrow(validBaselineTadpole)))
colnames(validBaselineTadpole) <- str_remove_all(colnames(validBaselineTadpole),"_UCSFFSX_11_02_15_UCSFFSX51_08_01_16")
colnames(validBaselineTadpole) <- str_replace_all(colnames(validBaselineTadpole)," ","_")
validBaselineTadpole$LONISID <- NULL
validBaselineTadpole$IMAGEUID <- NULL
validBaselineTadpole$LONIUID <- NULL
diagnose <- as.character(validBaselineTadpole$DX)
validBaselineTadpole$DX <- diagnose
pander::pander(table(validBaselineTadpole$DX))
validDX <- c("NL","MCI","Dementia")
validBaselineTadpole <- validBaselineTadpole[validBaselineTadpole$DX %in% validDX,]
validBaselineTadpole$DX <- as.factor(validBaselineTadpole$DX)
pander::pander(table(validBaselineTadpole$DX))
# Chunk 5
cormat <- cor(validBaselineTadpole[,colnames(validBaselineTadpole) != "DX"],method="spearman")
diag(cormat) <- 0;
corrmax <- apply(cormat,2,max)
whomax <- colnames(cormat)[corrmax>0.75]
gplots::heatmap.2(abs(cormat[whomax,whomax]),
trace = "none",
scale = "none",
mar = c(10,10),
col=rev(heat.colors(5)),
main = "Baseline TADPOLE Correlation",
cexRow = 0.5,
cexCol = 0.5,
key.title=NA,
key.xlab="Spearman Correlation",
xlab="Feature", ylab="Feature")
par(op)
# Chunk 6
subjectsID <- rownames(validBaselineTadpole)
visitsID <- unique(TADPOLE_D1_D2$VISCODE)
baseDx <- TADPOLE_D1_D2[TADPOLE_D1_D2$VISCODE=="bl",c("PTID","DX","EXAMDATE")]
rownames(baseDx) <- baseDx$PTID
baseDx <- baseDx[subjectsID,]
lastDx <- baseDx
toDementia <- baseDx
table(lastDx$DX)
hasDementia <- lastDx$PTID[str_detect(lastDx$DX,"Dementia")]
for (vid in visitsID)
{
DxValue <- TADPOLE_D1_D2[TADPOLE_D1_D2$VISCODE==vid,c("PTID","DX","EXAMDATE")]
rownames(DxValue) <- DxValue$PTID
DxValue <- DxValue[DxValue$PTID %in% subjectsID,]
noDX <- DxValue$PTID[nchar(DxValue$DX) < 1]
print(length(noDX))
DxValue[noDX,] <- lastDx[noDX,]
inLast <- lastDx$PTID[lastDx$PTID %in% DxValue$PTID]
print(length(inLast))
lastDx[inLast,] <- DxValue[inLast,]
noDementia <- !(toDementia$PTID %in% hasDementia)
toDementia[noDementia,] <- lastDx[noDementia,]
hasDementia <- unique(c(hasDementia,lastDx$PTID[str_detect(lastDx$DX,"Dementia")]))
}
table(lastDx$DX)
baseMCI <-baseDx$PTID[baseDx$DX == "MCI"]
lastDementia <- lastDx$PTID[str_detect(lastDx$DX,"Dementia")]
lastDementia2 <- toDementia$PTID[str_detect(toDementia$DX,"Dementia")]
lastNL <- lastDx$PTID[str_detect(lastDx$DX,"NL")]
MCIatBaseline <- baseDx[baseMCI,]
MCIatEvent <- toDementia[baseMCI,]
MCIatLast <- lastDx[baseMCI,]
MCIconverters <- MCIatBaseline[baseMCI %in% lastDementia,]
MCI_No_converters <- MCIatBaseline[!(baseMCI %in% MCIconverters$PTID),]
MCIconverters$TimeToEvent <- (as.Date(toDementia[MCIconverters$PTID,"EXAMDATE"])
- as.Date(MCIconverters$EXAMDATE))
sum(MCIconverters$TimeToEvent ==0)
MCIconverters$AtEventDX <- MCIatEvent[MCIconverters$PTID,"DX"]
MCIconverters$LastDX <- MCIatLast[MCIconverters$PTID,"DX"]
MCI_No_converters$TimeToEvent <- (as.Date(lastDx[MCI_No_converters$PTID,"EXAMDATE"])
- as.Date(MCI_No_converters$EXAMDATE))
MCI_No_converters$LastDX <- MCIatLast[MCI_No_converters$PTID,"DX"]
MCI_No_converters <- subset(MCI_No_converters,TimeToEvent > 0)
# Chunk 7
TrainFraction <- 0.70;
MCIPrognosisIDs <- c(MCIconverters$PTID,MCI_No_converters$PTID)
TADPOLECrossMRI <- validBaselineTadpole[MCIPrognosisIDs,]
pander::pander(table(TADPOLECrossMRI$DX))
TADPOLECrossMRI$DX <- NULL
TADPOLECrossMRI$status <- 1*(rownames(TADPOLECrossMRI) %in% MCIconverters$PTID)
table(TADPOLECrossMRI$status)
TADPOLECrossMRI$TimeToEvent <- numeric(nrow(TADPOLECrossMRI))
TADPOLECrossMRI[MCIconverters$PTID,"TimeToEvent"] <- MCIconverters$TimeToEvent
TADPOLECrossMRI[MCI_No_converters$PTID,"TimeToEvent"] <- MCI_No_converters$TimeToEvent
TADPOLECrossMRI$TimeToEvent <- TADPOLECrossMRI$TimeToEvent/365.25
TADPOLE_Cases <- subset(TADPOLECrossMRI,status==1)
TADPOLE_Controls <- subset(TADPOLECrossMRI,status==0)
trainCasesSet <- sample(nrow(TADPOLE_Cases),nrow(TADPOLE_Cases)*TrainFraction)
trainControlSet <- sample(nrow(TADPOLE_Controls),nrow(TADPOLE_Controls)*TrainFraction)
TADPOLE_Conv_TRAIN <- rbind(TADPOLE_Cases[trainCasesSet,],TADPOLE_Controls[trainControlSet,])
TADPOLE_Conv_TEST <- TADPOLECrossMRI[!(rownames(TADPOLECrossMRI) %in%
rownames(TADPOLE_Conv_TRAIN)),]
pander::pander(table(TADPOLE_Conv_TRAIN$status))
pander::pander(table(TADPOLE_Conv_TEST$status))
pander::pander(c(col=ncol(TADPOLECrossMRI),row=nrow(TADPOLECrossMRI)))
par(op)
# Chunk 8
pander::pander(table(is.na(as.numeric(baselineTadpole$ABETA_UPENNBIOMK9_04_19_17)),baselineTadpole$DX))
pander::pander(table(is.na(as.numeric(baselineTadpole$APOE4)),baselineTadpole$DX))
pander::pander(table(is.na(as.numeric(baselineTadpole$TAU_UPENNBIOMK9_04_19_17)),baselineTadpole$DX))
pander::pander(table(is.na(as.numeric(baselineTadpole$PTAU_UPENNBIOMK9_04_19_17)),baselineTadpole$DX))
pander::pander(table(is.na(as.numeric(baselineTadpole$PTAU_UPENNBIOMK9_04_19_17)),
is.na(as.numeric(baselineTadpole$ABETA_UPENNBIOMK9_04_19_17))))
pander::pander(table(baselineTadpole$DX_bl,baselineTadpole$DX))
pander::pander(c(col=ncol(baselineTadpole),row=nrow(baselineTadpole)))
pander::pander(c(col=ncol(validBaselineTadpole),row=nrow(validBaselineTadpole)))
pander::pander(c(col=ncol(TADPOLECrossMRI),row=nrow(TADPOLECrossMRI)))
# Chunk 9
varlist <- colnames(TADPOLECrossMRI);
varlist <- varlist[varlist != "status"]
varlist <- varlist[1:17]
varlist <- cbind(varlist,varlist)
uvar <- uniRankVar(variableList=varlist,
formula="Surv(TimeToEvent,status)~1+AGE",
Outcome="status",
data=TADPOLECrossMRI,
timeOutcome="TimeToEvent")
colnames(uvar$orderframe)
uninames <- c("caseMean","caseStd","controlMean","controlStd","Beta","ZGLM","t.Rawvalue")
pander::pander(uvar$orderframe[,uninames])
TADPOLE_Conv_TRAINNorm <- FRESAScale(TADPOLE_Conv_TRAIN)
TADPOLE_Conv_TRAINNorm <- TADPOLE_Conv_TRAINNorm$scaledData
TADPOLE_Conv_TRAINNorm$TimeToEvent <- TADPOLE_Conv_TRAIN$TimeToEvent
TADPOLE_Conv_TESTNorm <- FRESAScale(TADPOLE_Conv_TEST,TADPOLE_Conv_TRAIN)$scaledData
TADPOLE_Conv_TESTNorm$TimeToEvent <- TADPOLE_Conv_TEST$TimeToEvent
bConvml <- BSWiMS.model(Surv(TimeToEvent,status)~1,TADPOLE_Conv_TRAINNorm,loops=20,NumberofRepeats = 20)
#bConvml <- BSWiMS.model(Surv(TimeToEvent,status)~1,TADPOLE_Conv_TRAIN,loops=20,NumberofRepeats = 20)
pander::pander(bConvml$bagging$Jaccard.SM)
fs <- bConvml$bagging$frequencyTable
barplot(fs[order(-fs)],las=2,main="Selected Features",cex.names = 0.5)
sm <- summary(bConvml)
summary(TADPOLE_Conv_TRAINNorm$M_ST39CV)
pander::pander(bConvml$formula.list)
pander::pander(bConvml$bagging$predfit)
pander::pander(bConvml$bagging$predfit$coef)
cnames <- names(bConvml$bagging$bagged.model$coefficients)
pander::pander(cbind(
bConvml$bagging$bagged.model$coefficients,
bConvml$bagging$bagged.model$baggingAnalysis$coefficients[cnames],
bConvml$bagging$bagged.model$baggingAnalysis$wts[cnames],
bConvml$bagging$bagged.model$baggingAnalysis$avgLogPvalues[cnames],
bConvml$bagging$bagged.model$baggingAnalysis$RelativeFrequency[cnames])
)
pander::pander(sm$coefficients)
cmax <- apply(bConvml$bagging$formulaNetwork,2,max)
mcoef <- bConvml$bagging$bagged.model$coefficients
cnames <- names(cmax[cmax>=0.025])
#cnames <- cnames[abs(mcoef[cnames])>1.0e-10]
cmax <- cmax[cnames]
adma <- bConvml$bagging$formulaNetwork[cnames,cnames]
adma[adma<0.15] <- 0;
gr <- graph_from_adjacency_matrix(adma,mode = "undirected",diag = FALSE,weighted=TRUE)
gr$layout <- layout_with_fr
fc <- cluster_optimal(gr)
plot(fc, gr,
edge.width=5*E(gr)$weight,
vertex.size=20*cmax,
vertex.label.cex=0.75,
vertex.label.dist=0,
main="MCI to Dementia Conversion")
par(op)
clusterFeatures <- fc$names
tableMCI_to_Dem <- sm$coefficients[clusterFeatures,
c("Estimate",
"lower",
"HR",
"upper",
"full.AUC",
"Delta.AUC",
"z.IDI",
"Frequency")]
nugget <- fc$membership
names(nugget) <- clusterFeatures
tableMCI_to_Dem$Cluster <- nugget[rownames(tableMCI_to_Dem)]
rnames <- clusterFeatures[str_detect(clusterFeatures,"ST")]
frnames <- rnames
rnames <- str_replace_all(rnames,"M_","")
rnames <- str_replace_all(rnames,"RD_","")
rnames <- str_replace_all(rnames,"Ba_","")
rnames <- str_replace_all(rnames,"De_","")
description <- character()
for (ddet in c(1:length(rnames)))
{
description <- c(description,TADPOLE_D1_D2_Dict$TEXT[str_detect(TADPOLE_D1_D2_Dict$FLDNAME,rnames[ddet])][1])
}
names(description) <- frnames
tableMCI_to_Dem$Description <- description[rownames(tableMCI_to_Dem)]
pander::pander(tableMCI_to_Dem)
load("~/GitHub/SurvivalTadpole/RMDS/TADPOLE_BSWIMS_Results.RData")
cvBSWiMSRaw$featureFrequency
selFeatures <- names(cvBSWiMSRaw$featureFrequency[cvBSWiMSRaw$featureFrequency>5])
selFeatures
selFeatures <- names(cvBSWiMSRaw$featureFrequency[cvBSWiMSRaw$featureFrequency>5])
clusterFeatures <- fc$names[fc$names %in% selFeatures]
tableMCI_to_Dem <- sm$coefficients[clusterFeatures,
c("Estimate",
"lower",
"HR",
"upper",
"full.AUC",
"Delta.AUC",
"z.IDI",
"Frequency")]
nugget <- fc$membership
names(nugget) <- clusterFeatures
tableMCI_to_Dem$Cluster <- nugget[rownames(tableMCI_to_Dem)]
rnames <- clusterFeatures[str_detect(clusterFeatures,"ST")]
frnames <- rnames
rnames <- str_replace_all(rnames,"M_","")
rnames <- str_replace_all(rnames,"RD_","")
rnames <- str_replace_all(rnames,"Ba_","")
rnames <- str_replace_all(rnames,"De_","")
description <- character()
for (ddet in c(1:length(rnames)))
{
description <- c(description,TADPOLE_D1_D2_Dict$TEXT[str_detect(TADPOLE_D1_D2_Dict$FLDNAME,rnames[ddet])][1])
}
names(description) <- frnames
tableMCI_to_Dem$Description <- description[rownames(tableMCI_to_Dem)]
pander::pander(tableMCI_to_Dem)
selFeatures <- names(cvBSWiMSRaw$featureFrequency[cvBSWiMSRaw$featureFrequency>5])
clusterFeatures <- fc$names
tableMCI_to_Dem <- sm$coefficients[clusterFeatures,
c("Estimate",
"lower",
"HR",
"upper",
"full.AUC",
"Delta.AUC",
"z.IDI",
"Frequency")]
nugget <- fc$membership
names(nugget) <- clusterFeatures
tableMCI_to_Dem$Cluster <- nugget[rownames(tableMCI_to_Dem)]
tableMCI_to_Dem$CVFreq <- cvBSWiMSRaw$featureFrequency[clusterFeatures]
rnames <- clusterFeatures[str_detect(clusterFeatures,"ST")]
frnames <- rnames
rnames <- str_replace_all(rnames,"M_","")
rnames <- str_replace_all(rnames,"RD_","")
rnames <- str_replace_all(rnames,"Ba_","")
rnames <- str_replace_all(rnames,"De_","")
description <- character()
for (ddet in c(1:length(rnames)))
{
description <- c(description,TADPOLE_D1_D2_Dict$TEXT[str_detect(TADPOLE_D1_D2_Dict$FLDNAME,rnames[ddet])][1])
}
names(description) <- frnames
tableMCI_to_Dem$Description <- description[rownames(tableMCI_to_Dem)]
pander::pander(tableMCI_to_Dem)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(collapse = TRUE, warning = FALSE, message = FALSE,comment = "#>")
# Chunk 2
library("FRESA.CAD")
library(survival)
library(readxl)
library(igraph)
op <- par(no.readonly = TRUE)
pander::panderOptions('digits', 3)
pander::panderOptions('table.split.table', 400)
pander::panderOptions('keep.trailing.zeros',TRUE)
# Chunk 3
load("~/GitHub/SurvivalTadpole/RMDS/TADPOLE_BSWIMS_Results.RData")
load("~/GitHub/SurvivalTadpole/RMDS/TADPOLE_BESS_Results.RData")
load("~/GitHub/SurvivalTadpole/RMDS/TADPOLE_LASSO_Results.RData")
par(op)
survmtest <- cvLASSORaw$survMedianTest
survmtest <- survmtest[complete.cases(survmtest),]
prBinLASSO <- predictionStats_binary(survmtest[,c(2,3)],"LASSO: MCI to  AD Conversion")
survmtest <- cvBESSRaw$survMedianTest
survmtest <- survmtest[complete.cases(survmtest),]
prBinBESS <- predictionStats_binary(survmtest[,c(2,3)],"BESS:BIC: MCI to  AD Conversion")
survmtest <- cvBSWiMSRaw$survMedianTest
survmtest <- survmtest[complete.cases(survmtest),]
prBinBSWiMS <- predictionStats_binary(survmtest[,c(2,3)],"MCI to  AD Conversion")
par(new=TRUE)
plot(prBinLASSO$ROC.analysis$roc.predictor,col="red")
par(new=TRUE)
plot(prBinBESS$ROC.analysis$roc.predictor,col="blue")
legend("bottomright",
legend=c("BSWiMS","LASSO","BIC"),
lty=1,
col=c("black","red","blue"))
selFeatures <- names(cvBSWiMSRaw$featureFrequency[cvBSWiMSRaw$featureFrequency>5])
clusterFeatures <- fc$names
tableMCI_to_Dem <- sm$coefficients[clusterFeatures,
c("Estimate",
"lower",
"HR",
"upper",
"full.AUC",
"Delta.AUC",
"z.IDI",
"Frequency")]
nugget <- fc$membership
names(nugget) <- clusterFeatures
tableMCI_to_Dem$Cluster <- nugget[rownames(tableMCI_to_Dem)]
tableMCI_to_Dem$CVFreq <- cvBSWiMSRaw$featureFrequency[clusterFeatures]
rnames <- clusterFeatures[str_detect(clusterFeatures,"ST")]
frnames <- rnames
rnames <- str_replace_all(rnames,"M_","")
rnames <- str_replace_all(rnames,"RD_","")
rnames <- str_replace_all(rnames,"Ba_","")
rnames <- str_replace_all(rnames,"De_","")
description <- character()
for (ddet in c(1:length(rnames)))
{
description <- c(description,TADPOLE_D1_D2_Dict$TEXT[str_detect(TADPOLE_D1_D2_Dict$FLDNAME,rnames[ddet])][1])
}
names(description) <- frnames
tableMCI_to_Dem$Description <- description[rownames(tableMCI_to_Dem)]
pander::pander(tableMCI_to_Dem)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(collapse = TRUE, warning = FALSE, message = FALSE,comment = "#>")
# Chunk 2
library("FRESA.CAD")
library(survival)
library(readxl)
library(igraph)
op <- par(no.readonly = TRUE)
pander::panderOptions('digits', 3)
pander::panderOptions('table.split.table', 400)
pander::panderOptions('keep.trailing.zeros',TRUE)
# Chunk 3
load("~/GitHub/SurvivalTadpole/RMDS/TADPOLE_BSWIMS_Results.RData")
load("~/GitHub/SurvivalTadpole/RMDS/TADPOLE_BESS_Results.RData")
load("~/GitHub/SurvivalTadpole/RMDS/TADPOLE_LASSO_Results.RData")
par(op)
survmtest <- cvLASSORaw$survMedianTest
survmtest <- survmtest[complete.cases(survmtest),]
prBinLASSO <- predictionStats_binary(survmtest[,c(2,3)],"LASSO: MCI to  AD Conversion")
survmtest <- cvBESSRaw$survMedianTest
survmtest <- survmtest[complete.cases(survmtest),]
prBinBESS <- predictionStats_binary(survmtest[,c(2,3)],"BESS:BIC: MCI to  AD Conversion")
survmtest <- cvBSWiMSRaw$survMedianTest
survmtest <- survmtest[complete.cases(survmtest),]
prBinBSWiMS <- predictionStats_binary(survmtest[,c(2,3)],"MCI to  AD Conversion")
par(new=TRUE)
plot(prBinLASSO$ROC.analysis$roc.predictor,col="red")
par(new=TRUE)
plot(prBinBESS$ROC.analysis$roc.predictor,col="blue")
legend("bottomright",
legend=c("BSWiMS","LASSO","BIC"),
lty=1,
col=c("black","red","blue"))
selFeatures <- names(cvBSWiMSRaw$featureFrequency[cvBSWiMSRaw$featureFrequency>5])
clusterFeatures <- fc$names
tableMCI_to_Dem <- sm$coefficients[clusterFeatures,
c("Estimate",
"lower",
"HR",
"upper",
"full.AUC",
"Delta.AUC",
"z.IDI",
"Frequency")]
nugget <- fc$membership
names(nugget) <- clusterFeatures
tableMCI_to_Dem$Cluster <- nugget[rownames(tableMCI_to_Dem)]
tableMCI_to_Dem$CVFreq <- cvBSWiMSRaw$featureFrequency[clusterFeatures]
rnames <- clusterFeatures[str_detect(clusterFeatures,"ST")]
frnames <- rnames
rnames <- str_replace_all(rnames,"M_","")
rnames <- str_replace_all(rnames,"RD_","")
rnames <- str_replace_all(rnames,"Ba_","")
rnames <- str_replace_all(rnames,"De_","")
description <- character()
for (ddet in c(1:length(rnames)))
{
description <- c(description,TADPOLE_D1_D2_Dict$TEXT[str_detect(TADPOLE_D1_D2_Dict$FLDNAME,rnames[ddet])][1])
}
names(description) <- frnames
tableMCI_to_Dem$Description <- description[rownames(tableMCI_to_Dem)]
pander::pander(tableMCI_to_Dem)
load("~/GitHub/SurvivalTadpole/RMDS/TADPOLE_BSWIMS_Results.RData")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(collapse = TRUE, warning = FALSE, message = FALSE,comment = "#>")
# Chunk 2
library("FRESA.CAD")
library(survival)
library(readxl)
library(igraph)
op <- par(no.readonly = TRUE)
pander::panderOptions('digits', 3)
pander::panderOptions('table.split.table', 400)
pander::panderOptions('keep.trailing.zeros',TRUE)
# Chunk 3
load("~/GitHub/SurvivalTadpole/RMDS/TADPOLE_BESS_Results.RData")
load("~/GitHub/SurvivalTadpole/RMDS/TADPOLE_LASSO_Results.RData")
load("~/GitHub/SurvivalTadpole/RMDS/TADPOLE_BSWIMS_Results.RData")
par(op)
survmtest <- cvLASSORaw$survMedianTest
survmtest <- survmtest[complete.cases(survmtest),]
prBinLASSO <- predictionStats_binary(survmtest[,c(2,3)],"LASSO: MCI to  AD Conversion")
survmtest <- cvBESSRaw$survMedianTest
survmtest <- survmtest[complete.cases(survmtest),]
prBinBESS <- predictionStats_binary(survmtest[,c(2,3)],"BESS:BIC: MCI to  AD Conversion")
survmtest <- cvBSWiMSRaw$survMedianTest
survmtest <- survmtest[complete.cases(survmtest),]
prBinBSWiMS <- predictionStats_binary(survmtest[,c(2,3)],"MCI to  AD Conversion")
par(new=TRUE)
plot(prBinLASSO$ROC.analysis$roc.predictor,col="red")
par(new=TRUE)
plot(prBinBESS$ROC.analysis$roc.predictor,col="blue")
legend("bottomright",
legend=c("BSWiMS","LASSO","BIC"),
lty=1,
col=c("black","red","blue"))
# Chunk 4
selFeatures <- names(cvBSWiMSRaw$featureFrequency[cvBSWiMSRaw$featureFrequency>5])
clusterFeatures <- fc$names
tableMCI_to_Dem <- sm$coefficients[clusterFeatures,
c("Estimate",
"lower",
"HR",
"upper",
"full.AUC",
"Delta.AUC",
"z.IDI",
"Frequency")]
nugget <- fc$membership
names(nugget) <- clusterFeatures
tableMCI_to_Dem$Cluster <- nugget[rownames(tableMCI_to_Dem)]
tableMCI_to_Dem$CVFreq <- cvBSWiMSRaw$featureFrequency[clusterFeatures]
rnames <- clusterFeatures[str_detect(clusterFeatures,"ST")]
frnames <- rnames
rnames <- str_replace_all(rnames,"M_","")
rnames <- str_replace_all(rnames,"RD_","")
rnames <- str_replace_all(rnames,"Ba_","")
rnames <- str_replace_all(rnames,"De_","")
description <- character()
for (ddet in c(1:length(rnames)))
{
description <- c(description,TADPOLE_D1_D2_Dict$TEXT[str_detect(TADPOLE_D1_D2_Dict$FLDNAME,rnames[ddet])][1])
}
names(description) <- frnames
tableMCI_to_Dem$Description <- description[rownames(tableMCI_to_Dem)]
pander::pander(tableMCI_to_Dem)
# Chunk 5
hm <- heatMaps(Outcome="status",data=TADPOLECrossMRI[,c("status",clusterFeatures)],title="Heat Map",Scale=TRUE,
theFiveColors=c("black","red","orange","yellow","white"),
#					   theFiveColors=c("darkred","red","yellow","blue","darkblue"),
hCluster="col",
cexRow=0.50,cexCol=0.65,srtCol=35,
ylab="Subjects",
xlab="Features"
)
selFeatures
