pander::panderOptions('keep.trailing.zeros',TRUE)
# Chunk 3
load("~/GitHub/SurvivalTadpole/RMDS/TADPOLE_BSWIMS_Results.RData")
load("~/GitHub/SurvivalTadpole/RMDS/TADPOLE_BESS_Results.RData")
load("~/GitHub/SurvivalTadpole/RMDS/TADPOLE_LASSO_Results.RData")
par(op)
survmtest <- cvLASSORaw$survMedianTest
survmtest <- survmtest[complete.cases(survmtest),]
prBinLASSO <- predictionStats_binary(survmtest[,c(2,3)],"LASSO: MCI to  AD Conversion")
survmtest <- cvBESSRaw$survMedianTest
survmtest <- survmtest[complete.cases(survmtest),]
prBinBESS <- predictionStats_binary(survmtest[,c(2,3)],"BESS:BIC: MCI to  AD Conversion")
survmtest <- cvBSWiMSRaw$survMedianTest
survmtest <- survmtest[complete.cases(survmtest),]
prBinBSWiMS <- predictionStats_binary(survmtest[,c(2,3)],"MCI to  AD Conversion")
par(new=TRUE)
plot(prBinLASSO$ROC.analysis$roc.predictor,col="red")
par(new=TRUE)
plot(prBinBESS$ROC.analysis$roc.predictor,col="blue")
legend("bottomright",
legend=c("BSWiMS","LASSO","BIC"),
lty=1,
col=c("black","red","blue"))
selFeatures <- names(cvBSWiMSRaw$featureFrequency[cvBSWiMSRaw$featureFrequency>5])
clusterFeatures <- fc$names
tableMCI_to_Dem <- sm$coefficients[clusterFeatures,
c("Estimate",
"lower",
"HR",
"upper",
"full.AUC",
"Delta.AUC",
"z.IDI",
"Frequency")]
nugget <- fc$membership
names(nugget) <- clusterFeatures
tableMCI_to_Dem$Cluster <- nugget[rownames(tableMCI_to_Dem)]
tableMCI_to_Dem$CVFreq <- cvBSWiMSRaw$featureFrequency[clusterFeatures]
rnames <- clusterFeatures[str_detect(clusterFeatures,"ST")]
frnames <- rnames
rnames <- str_replace_all(rnames,"M_","")
rnames <- str_replace_all(rnames,"RD_","")
rnames <- str_replace_all(rnames,"Ba_","")
rnames <- str_replace_all(rnames,"De_","")
description <- character()
for (ddet in c(1:length(rnames)))
{
description <- c(description,TADPOLE_D1_D2_Dict$TEXT[str_detect(TADPOLE_D1_D2_Dict$FLDNAME,rnames[ddet])][1])
}
names(description) <- frnames
tableMCI_to_Dem$Description <- description[rownames(tableMCI_to_Dem)]
pander::pander(tableMCI_to_Dem)
load("~/GitHub/SurvivalTadpole/RMDS/TADPOLE_BSWIMS_Results.RData")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(collapse = TRUE, warning = FALSE, message = FALSE,comment = "#>")
# Chunk 2
library("FRESA.CAD")
library(survival)
library(readxl)
library(igraph)
op <- par(no.readonly = TRUE)
pander::panderOptions('digits', 3)
pander::panderOptions('table.split.table', 400)
pander::panderOptions('keep.trailing.zeros',TRUE)
# Chunk 3
load("~/GitHub/SurvivalTadpole/RMDS/TADPOLE_BESS_Results.RData")
load("~/GitHub/SurvivalTadpole/RMDS/TADPOLE_LASSO_Results.RData")
load("~/GitHub/SurvivalTadpole/RMDS/TADPOLE_BSWIMS_Results.RData")
par(op)
survmtest <- cvLASSORaw$survMedianTest
survmtest <- survmtest[complete.cases(survmtest),]
prBinLASSO <- predictionStats_binary(survmtest[,c(2,3)],"LASSO: MCI to  AD Conversion")
survmtest <- cvBESSRaw$survMedianTest
survmtest <- survmtest[complete.cases(survmtest),]
prBinBESS <- predictionStats_binary(survmtest[,c(2,3)],"BESS:BIC: MCI to  AD Conversion")
survmtest <- cvBSWiMSRaw$survMedianTest
survmtest <- survmtest[complete.cases(survmtest),]
prBinBSWiMS <- predictionStats_binary(survmtest[,c(2,3)],"MCI to  AD Conversion")
par(new=TRUE)
plot(prBinLASSO$ROC.analysis$roc.predictor,col="red")
par(new=TRUE)
plot(prBinBESS$ROC.analysis$roc.predictor,col="blue")
legend("bottomright",
legend=c("BSWiMS","LASSO","BIC"),
lty=1,
col=c("black","red","blue"))
# Chunk 4
selFeatures <- names(cvBSWiMSRaw$featureFrequency[cvBSWiMSRaw$featureFrequency>5])
clusterFeatures <- fc$names
tableMCI_to_Dem <- sm$coefficients[clusterFeatures,
c("Estimate",
"lower",
"HR",
"upper",
"full.AUC",
"Delta.AUC",
"z.IDI",
"Frequency")]
nugget <- fc$membership
names(nugget) <- clusterFeatures
tableMCI_to_Dem$Cluster <- nugget[rownames(tableMCI_to_Dem)]
tableMCI_to_Dem$CVFreq <- cvBSWiMSRaw$featureFrequency[clusterFeatures]
rnames <- clusterFeatures[str_detect(clusterFeatures,"ST")]
frnames <- rnames
rnames <- str_replace_all(rnames,"M_","")
rnames <- str_replace_all(rnames,"RD_","")
rnames <- str_replace_all(rnames,"Ba_","")
rnames <- str_replace_all(rnames,"De_","")
description <- character()
for (ddet in c(1:length(rnames)))
{
description <- c(description,TADPOLE_D1_D2_Dict$TEXT[str_detect(TADPOLE_D1_D2_Dict$FLDNAME,rnames[ddet])][1])
}
names(description) <- frnames
tableMCI_to_Dem$Description <- description[rownames(tableMCI_to_Dem)]
pander::pander(tableMCI_to_Dem)
# Chunk 5
hm <- heatMaps(Outcome="status",data=TADPOLECrossMRI[,c("status",clusterFeatures)],title="Heat Map",Scale=TRUE,
theFiveColors=c("black","red","orange","yellow","white"),
#					   theFiveColors=c("darkred","red","yellow","blue","darkblue"),
hCluster="col",
cexRow=0.50,cexCol=0.65,srtCol=35,
ylab="Subjects",
xlab="Features"
)
selFeatures
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(collapse = TRUE, warning = FALSE, message = FALSE,comment = "#>")
# Chunk 2
library("FRESA.CAD")
library(survival)
library(readxl)
library(igraph)
op <- par(no.readonly = TRUE)
pander::panderOptions('digits', 3)
pander::panderOptions('table.split.table', 400)
pander::panderOptions('keep.trailing.zeros',TRUE)
load("~/GitHub/SurvivalTadpole/RMDS/TADPOLE_BESS_Results.RData")
load("~/GitHub/SurvivalTadpole/RMDS/TADPOLE_LASSO_Results.RData")
load("~/GitHub/SurvivalTadpole/RMDS/TADPOLE_BSWIMS_Results.RData")
survmtest <- cvLASSORaw$survMedianTest
survmtest <- survmtest[complete.cases(survmtest),]
prBinLASSO <- predictionStats_binary(survmtest[,c(2,3)],"LASSO: MCI to  AD Conversion")
survmtest <- cvBESSRaw$survMedianTest
survmtest <- survmtest[complete.cases(survmtest),]
prBinBESS <- predictionStats_binary(survmtest[,c(2,3)],"BESS:BIC: MCI to  AD Conversion")
survmtest <- cvBSWiMSRaw$survMedianTest
survmtest <- survmtest[complete.cases(survmtest),]
prBinBSWiMS <- predictionStats_binary(survmtest[,c(2,3)],"MCI to  AD Conversion")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(collapse = TRUE, warning = FALSE, message = FALSE,comment = "#>")
# Chunk 2
library("FRESA.CAD")
library(survival)
library(readxl)
library(igraph)
op <- par(no.readonly = TRUE)
pander::panderOptions('digits', 3)
pander::panderOptions('table.split.table', 400)
pander::panderOptions('keep.trailing.zeros',TRUE)
# Chunk 3
load("~/GitHub/SurvivalTadpole/RMDS/TADPOLE_BESS_Results.RData")
load("~/GitHub/SurvivalTadpole/RMDS/TADPOLE_LASSO_Results.RData")
load("~/GitHub/SurvivalTadpole/RMDS/TADPOLE_BSWIMS_Results.RData")
par(op)
survmtest <- cvLASSORaw$survMedianTest
survmtest <- survmtest[complete.cases(survmtest),]
prBinLASSO <- predictionStats_binary(survmtest[,c(2,3)],"LASSO: MCI to  AD Conversion")
survmtest <- cvRIDGERaw$survMedianTest
survmtest <- survmtest[complete.cases(survmtest),]
prBinRIDGE <- predictionStats_binary(survmtest[,c(2,3)],"RIDGE: MCI to  AD Conversion")
survmtest <- cvBESSRaw$survMedianTest
survmtest <- survmtest[complete.cases(survmtest),]
prBinBESS <- predictionStats_binary(survmtest[,c(2,3)],"BESS:BIC: MCI to  AD Conversion")
survmtest <- cvBESSERaw$survMedianTest
survmtest <- survmtest[complete.cases(survmtest),]
prBinBESSEBIC <- predictionStats_binary(survmtest[,c(2,3)],"BESS:EBIC: MCI to  AD Conversion")
survmtest <- cvBESSGSERaw$survMedianTest
survmtest <- survmtest[complete.cases(survmtest),]
prBinBESSGS <- predictionStats_binary(survmtest[,c(2,3)],"BESS:GS: MCI to  AD Conversion")
survmtest <- cvBSWiMSRaw$survMedianTest
survmtest <- survmtest[complete.cases(survmtest),]
prBinBSWiMS <- predictionStats_binary(survmtest[,c(2,3)],"MCI to  AD Conversion")
par(new=TRUE)
plot(prBinLASSO$ROC.analysis$roc.predictor,col="red")
par(new=TRUE)
plot(prBinRIDGE$ROC.analysis$roc.predictor,col="pink")
par(new=TRUE)
plot(prBinBESS$ROC.analysis$roc.predictor,col="blue")
par(new=TRUE)
plot(prBinBESSEBIC$ROC.analysis$roc.predictor,col="cyan")
par(new=TRUE)
plot(prBinBESSGS$ROC.analysis$roc.predictor,col="gold")
legend("bottomright",
legend=c("BSWiMS","LASSO","RIDGE","BIC","EBIC","BS"),
lty=1,
col=c("black","red","pink","blue","cyan","gold"))
legend("bottomright",
legend=c("BSWiMS","LASSO","RIDGE","BIC","EBIC","BS"),
lty=1,
col=c("black","red","pink","blue","cyan","gold"),cex=0.8)
source("~/GitHub/FRESA.CAD/R/RRPlot.R")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(collapse = TRUE, warning = FALSE, message = FALSE,comment = "#>")
# Chunk 2
library("FRESA.CAD")
library(survival)
library(readxl)
library(igraph)
op <- par(no.readonly = TRUE)
pander::panderOptions('digits', 3)
pander::panderOptions('table.split.table', 400)
pander::panderOptions('keep.trailing.zeros',TRUE)
# Chunk 3
load("./TADPOLE_BSWIMS_Results.RData")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(collapse = TRUE, warning = FALSE, message = FALSE,comment = "#>")
# Chunk 2
library("FRESA.CAD")
library(survival)
library(readxl)
library(igraph)
op <- par(no.readonly = TRUE)
pander::panderOptions('digits', 3)
pander::panderOptions('table.split.table', 400)
pander::panderOptions('keep.trailing.zeros',TRUE)
# Chunk 3
load("./TADPOLE_BSWIMS_Results.RData")
load("~/GitHub/SurvivalTadpole/RMDS/TADPOLE_BSWIMS_Results.RData")
cvBESSRaw <- randomCV(TADPOLECrossMRI,
Surv(TimeToEvent,status)~.,
fittingFunction= BESS,
trainSampleSets= cvBSWiMSRaw$trainSamplesSets,
)
pander::pander(cbind(cvBESSRaw$featureFrequency[cvBESSRaw$featureFrequency>20]))
prBin <- predictionStats_binary(cvBESSRaw$survMedianTrain[,c(2,3)],"TRAIN: MCI to  AD Conversion")
survmtest <- cvBESSRaw$survMedianTest
survmtest <- survmtest[complete.cases(survmtest),]
prBin <- predictionStats_binary(survmtest[,c(2,3)],"BESS:BIC: MCI to  AD Conversion")
pander::pander(prBin$aucs)
pander::pander(prBin$CM.analysis$tab)
par(op)
ho <- mean(survmtest$Outcome)
timeInterval <- mean(survmtest[survmtest$Outcome==0,"Times"])
pgzero <- ppoisGzero(survmtest$LinearPredictorsMedian,ho)
rsdata <- cbind(survmtest$Outcome,pgzero,survmtest$Times)
riskAnalysis <- RRPlot(rsdata,riskTimeInterval=timeInterval,title="BESS:BIC")
pander::pander(riskAnalysis$c.index)
pander::pander(riskAnalysis$ROCAnalysis$aucs)
pander::pander(riskAnalysis$cenAUC)
pander::pander(riskAnalysis$ROCAnalysis$ClassMetrics)
pander::pander(riskAnalysis$surdif)
cvBESSRaw$survMedianTrain[,c(2,3)
]
pgzero
riskAnalysis$keyPoints
rsdata[,2]
survmtest$Times
source("~/GitHub/FRESA.CAD/R/RRPlot.R")
riskAnalysis <- RRPlot(rsdata,riskTimeInterval=timeInterval,title="BESS:BIC")
source("~/GitHub/FRESA.CAD/R/RRPlot.R")
riskAnalysis <- RRPlot(rsdata,riskTimeInterval=timeInterval,title="BESS:BIC")
source("~/GitHub/FRESA.CAD/R/RRPlot.R")
riskAnalysis <- RRPlot(rsdata,riskTimeInterval=timeInterval,title="BESS:BIC")
source("~/GitHub/FRESA.CAD/R/RRPlot.R")
riskAnalysis <- RRPlot(rsdata,riskTimeInterval=timeInterval,title="BESS:BIC")
load("~/GitHub/SurvivalTadpole/RMDS/TADPOLE_BSWIMS_Results.RData")
fs <- bConvml$bagging$frequencyTable
barplot(fs[order(-fs)],las=2,main="Selected Features",cex.names = 0.5)
sm <- summary(bConvml)
library("FRESA.CAD")
library(survival)
library(readxl)
library(igraph)
op <- par(no.readonly = TRUE)
pander::panderOptions('digits', 3)
pander::panderOptions('table.split.table', 400)
pander::panderOptions('keep.trailing.zeros',TRUE)
fs <- bConvml$bagging$frequencyTable
barplot(fs[order(-fs)],las=2,main="Selected Features",cex.names = 0.5)
sm <- summary(bConvml)
summary(TADPOLE_Conv_TRAINNorm$M_ST39CV)
pander::pander(bConvml$formula.list)
pander::pander(bConvml$bagging$predfit$coef)
cnames <- names(bConvml$bagging$bagged.model$coefficients)
pander::pander(cbind(
bConvml$bagging$bagged.model$coefficients,
bConvml$bagging$bagged.model$baggingAnalysis$coefficients[cnames],
bConvml$bagging$bagged.model$baggingAnalysis$wts[cnames],
bConvml$bagging$bagged.model$baggingAnalysis$avgLogPvalues[cnames],
bConvml$bagging$bagged.model$baggingAnalysis$RelativeFrequency[cnames])
)
pander::pander(sm$coefficients)
pander::pander(bConvml$univariate[bConvml$selectedfeatures,])
#ptestl <- predict(bConvml,TADPOLE_Conv_TEST,type="lp")
ptestl <- predict(bConvml,TADPOLE_Conv_TESTNorm,type="lp")
boxplot(ptestl~TADPOLE_Conv_TEST$status)
#ptestr <- predict(bConvml,TADPOLE_Conv_TEST,type="risk")
ptestr <- predict(bConvml,TADPOLE_Conv_TESTNorm,type="risk")
eventCases <- subset(TADPOLE_Conv_TEST,status==1)
plot(1.0/ptestr[rownames(eventCases)]~eventCases$TimeToEvent)
pander::pander(cor.test(eventCases$TimeToEvent,1.0/ptestr[rownames(eventCases)],method="spearman"))
perdsurv <- as.data.frame(cbind(Times=TADPOLE_Conv_TEST$TimeToEvent,
Outcome=TADPOLE_Conv_TEST$status,
LinearPredictors=ptestl,
ptestr))
boxplot(perdsurv$LinearPredictors~perdsurv$Outcome)
prSurv <- predictionStats_survival(perdsurv,"BSWiMS: MCI to  AD Conversion")
pander::pander(prSurv$CIRisk)
pander::pander(prSurv$CILp)
pander::pander(prSurv$spearmanCI)
prBin <- predictionStats_binary(cbind(TADPOLE_Conv_TEST$status,ptestl),"BSWiMS: MCI to  AD Conversion")
pander::pander(prBin$aucs)
pander::pander(prBin$CM.analysis$tab)
par(op)
ho <- mean(TADPOLE_Conv_TRAIN$status)
timeInterval <- mean(TADPOLE_Conv_TRAIN[TADPOLE_Conv_TRAIN$status==0,"TimeToEvent"])
pgzero <- ppoisGzero(perdsurv$LinearPredictors,ho)
rsdata <- cbind(perdsurv$Outcome,pgzero,perdsurv$Times)
riskAnalysis <- RRPlot(rsdata,riskTimeInterval=timeInterval,title="Test")
pander::pander(riskAnalysis$keyPoints)
pander::pander(riskAnalysis$c.index)
pander::pander(riskAnalysis$ROCAnalysis$aucs)
pander::pander(riskAnalysis$cenAUC)
pander::pander(riskAnalysis$ROCAnalysis$ClassMetrics)
pander::pander(riskAnalysis$surdif)
cmax <- apply(bConvml$bagging$formulaNetwork,2,max)
mcoef <- bConvml$bagging$bagged.model$coefficients
cnames <- names(cmax[cmax>=0.025])
#cnames <- cnames[abs(mcoef[cnames])>1.0e-10]
cmax <- cmax[cnames]
adma <- bConvml$bagging$formulaNetwork[cnames,cnames]
adma[adma<0.15] <- 0;
gr <- graph_from_adjacency_matrix(adma,mode = "undirected",diag = FALSE,weighted=TRUE)
gr$layout <- layout_with_fr
fc <- cluster_optimal(gr)
plot(fc, gr,
edge.width=5*E(gr)$weight,
vertex.size=20*cmax,
vertex.label.cex=0.55,
vertex.label.dist=0,
main="MCI to Dementia Conversion")
par(op)
pander::pander(roc.test(prBinLASSO$ROC.analysis$roc.predictor,prBinBSWiMS$ROC.analysis$roc.predictor))
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(collapse = TRUE, warning = FALSE, message = FALSE,comment = "#>")
# Chunk 2
library("FRESA.CAD")
library(survival)
library(readxl)
library(igraph)
op <- par(no.readonly = TRUE)
pander::panderOptions('digits', 3)
pander::panderOptions('table.split.table', 400)
pander::panderOptions('keep.trailing.zeros',TRUE)
# Chunk 3
load("~/GitHub/SurvivalTadpole/RMDS/TADPOLE_BESS_Results.RData")
load("~/GitHub/SurvivalTadpole/RMDS/TADPOLE_LASSO_Results.RData")
load("~/GitHub/SurvivalTadpole/RMDS/TADPOLE_BSWIMS_Results.RData")
par(op)
survmtest <- cvLASSORaw$survMedianTest
survmtest <- survmtest[complete.cases(survmtest),]
prBinLASSO <- predictionStats_binary(survmtest[,c(2,3)],"LASSO: MCI to  AD Conversion")
survmtest <- cvRIDGERaw$survMedianTest
survmtest <- survmtest[complete.cases(survmtest),]
prBinRIDGE <- predictionStats_binary(survmtest[,c(2,3)],"RIDGE: MCI to  AD Conversion")
survmtest <- cvBESSRaw$survMedianTest
survmtest <- survmtest[complete.cases(survmtest),]
prBinBESS <- predictionStats_binary(survmtest[,c(2,3)],"BESS:BIC: MCI to  AD Conversion")
survmtest <- cvBESSERaw$survMedianTest
survmtest <- survmtest[complete.cases(survmtest),]
prBinBESSEBIC <- predictionStats_binary(survmtest[,c(2,3)],"BESS:EBIC: MCI to  AD Conversion")
survmtest <- cvBESSGSERaw$survMedianTest
survmtest <- survmtest[complete.cases(survmtest),]
prBinBESSGS <- predictionStats_binary(survmtest[,c(2,3)],"BESS:GS: MCI to  AD Conversion")
survmtest <- cvBSWiMSRaw$survMedianTest
survmtest <- survmtest[complete.cases(survmtest),]
prBinBSWiMS <- predictionStats_binary(survmtest[,c(2,3)],"MCI to  AD Conversion")
par(new=TRUE)
plot(prBinLASSO$ROC.analysis$roc.predictor,col="red")
par(new=TRUE)
plot(prBinRIDGE$ROC.analysis$roc.predictor,col="pink")
par(new=TRUE)
plot(prBinBESS$ROC.analysis$roc.predictor,col="blue")
par(new=TRUE)
plot(prBinBESSEBIC$ROC.analysis$roc.predictor,col="cyan")
par(new=TRUE)
plot(prBinBESSGS$ROC.analysis$roc.predictor,col="gold")
legend("bottomright",
legend=c("BSWiMS","LASSO","RIDGE","BIC","EBIC","BS"),
lty=1,
col=c("black","red","pink","blue","cyan","gold"),cex=0.85)
pander::pander(roc.test(prBinLASSO$ROC.analysis$roc.predictor,prBinBSWiMS$ROC.analysis$roc.predictor))
pander::pander(roc.test(prBinLASSO$ROC.analysis$roc.predictor,prBinBESSEBIC$ROC.analysis$roc.predictor))
pander::pander(roc.test(prBinLASSO$ROC.analysis$roc.predictor,prBinBESSGS$ROC.analysis$roc.predictor))
pander::pander(roc.test(prBinLASSO$ROC.analysis$roc.predictor,prBinBESS$ROC.analysis$roc.predictor))
pander::pander(roc.test(prBinLASSO$ROC.analysis$roc.predictor,prBinRIDGE$ROC.analysis$roc.predictor))
pander::pander(roc.test(prBinBSWiMS$ROC.analysis$roc.predictor,prBinBESSEBIC$ROC.analysis$roc.predictor))
pander::pander(roc.test(prBinBSWiMS$ROC.analysis$roc.predictor,prBinBESSGS$ROC.analysis$roc.predictor))
pander::pander(roc.test(prBinBSWiMS$ROC.analysis$roc.predictor,prBinBESS$ROC.analysis$roc.predictor))
pander::pander(roc.test(prBinBSWiMS$ROC.analysis$roc.predictor,prBinRIDGE$ROC.analysis$roc.predictor))
pander::pander(c(col=ncol(validBaselineTadpole),row=nrow(validBaselineTadpole)))
pander::pander(c(col=ncol(validBaselineTadpole),row=nrow(validBaselineTadpole)))
pander::pander(table(baselineTadpole$APOE4))
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(collapse = TRUE, warning = FALSE, message = FALSE,comment = "#>")
# Chunk 2
library("FRESA.CAD")
library(survival)
library(readxl)
library(igraph)
op <- par(no.readonly = TRUE)
pander::panderOptions('digits', 3)
pander::panderOptions('table.split.table', 400)
pander::panderOptions('keep.trailing.zeros',TRUE)
# Chunk 3
setwd("~")
TADPOLE_D1_D2 <- read.csv("~/GitHub/SurvivalTadpole/Data/TADPOLE/TADPOLE_D1_D2.csv")
TADPOLE_D1_D2_Dict <- read.csv("~/GitHub/SurvivalTadpole/Data/TADPOLE/TADPOLE_D1_D2_Dict.csv")
TADPOLE_D1_D2_Dict_LR <- as.data.frame(read_excel("~/GitHub/SurvivalTadpole/Data/TADPOLE/TADPOLE_D1_D2_Dict_LR.xlsx",sheet = "LeftRightFeatures"))
rownames(TADPOLE_D1_D2_Dict) <- TADPOLE_D1_D2_Dict$FLDNAME
# mm3 to mm
isVolume <- c("Ventricles","Hippocampus","WholeBrain","Entorhinal","Fusiform","MidTemp","ICV",
TADPOLE_D1_D2_Dict$FLDNAME[str_detect(TADPOLE_D1_D2_Dict$TEXT,"Volume")]
)
#TADPOLE_D1_D2[,isVolume] <- apply(TADPOLE_D1_D2[,isVolume],2,'^',(1/3))
TADPOLE_D1_D2[,isVolume] <- TADPOLE_D1_D2[,isVolume]^(1/3)
# mm2 to mm
isArea <- TADPOLE_D1_D2_Dict$FLDNAME[str_detect(TADPOLE_D1_D2_Dict$TEXT,"Area")]
TADPOLE_D1_D2[,isArea] <- sqrt(TADPOLE_D1_D2[,isArea])
# Get only cross sectional measurements
FreeSurfersetCross <- str_detect(colnames(TADPOLE_D1_D2),"UCSFFSX")
# The subset of baseline measurements
baselineTadpole <- subset(TADPOLE_D1_D2,VISCODE=="bl")
sum(FreeSurfersetCross)
# The subset of baseline measurements
baselineTadpole <- subset(TADPOLE_D1_D2,VISCODE=="bl")
pander::pander(table(baselineTadpole$DX))
rownames(baselineTadpole) <- baselineTadpole$PTID
pander::pander(table(baselineTadpole$APOE4))
validBaselineTadpole <- cbind(DX=baselineTadpole$DX,
AGE=baselineTadpole$AGE,
Gender=1*(baselineTadpole$PTGENDER=="Female"),
ADAS11=baselineTadpole$ADAS11,
ADAS13=baselineTadpole$ADAS13,
MMSE=baselineTadpole$MMSE,
RAVLT_immediate=baselineTadpole$RAVLT_immediate,
RAVLT_learning=baselineTadpole$RAVLT_learning,
RAVLT_forgetting=baselineTadpole$RAVLT_forgetting,
RAVLT_perc_forgetting=baselineTadpole$RAVLT_perc_forgetting,
FAQ=baselineTadpole$FAQ,
APOE4=1*(as.numeric(baselineTadpole$APOE4)>0),
Ventricles=baselineTadpole$Ventricles,
Hippocampus=baselineTadpole$Hippocampus,
WholeBrain=baselineTadpole$WholeBrain,
Entorhinal=baselineTadpole$Entorhinal,
Fusiform=baselineTadpole$Fusiform,
MidTemp=baselineTadpole$MidTemp,
ICV=baselineTadpole$ICV,
ABETA=as.numeric(baselineTadpole$ABETA_UPENNBIOMK9_04_19_17),
TAU=as.numeric(baselineTadpole$TAU_UPENNBIOMK9_04_19_17),
PTAU=as.numeric(baselineTadpole$PTAU_UPENNBIOMK9_04_19_17),
baselineTadpole[,FreeSurfersetCross])
pander::pander(summary(validBaselineTadpole$APOE4))
pander::pander(summary(validBaselineTadpole$ABETA))
pander::pander(summary(validBaselineTadpole$TAU))
pander::pander(summary(validBaselineTadpole$PTAU))
fraction <- sum(is.na(validBaselineTadpole$PTAU)/nrow(validBaselineTadpole))
pander::pander(c(col=ncol(validBaselineTadpole),row=nrow(validBaselineTadpole)))
fraction
write.csv(TADPOLECrossMRI,file="TADPOLEMCI.vsv")
load("./TADPOLE_BSWIMS_Results.RData")
load("TADPOLE_BSWIMS_Results.RData")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(collapse = TRUE, warning = FALSE, message = FALSE,comment = "#>")
# Chunk 2
library("FRESA.CAD")
library(survival)
library(readxl)
library(igraph)
op <- par(no.readonly = TRUE)
pander::panderOptions('digits', 3)
pander::panderOptions('table.split.table', 400)
pander::panderOptions('keep.trailing.zeros',TRUE)
# Chunk 3
load("./TADPOLE_BSWIMS_Results.RData")
load("TADPOLE_BSWIMS_Results.RData")
load("~/GitHub/SurvivalTadpole/RMDS/TADPOLE_BSWIMS_Results.RData")
write.csv(TADPOLECrossMRI,file="TADPOLEMCI.vsv")
View(validBaselineTadpole)
library(readr)
TADPOLE_D1_D2_Dict <- read_csv("Data/TADPOLE/TADPOLE_D1_D2_Dict.csv")
View(TADPOLE_D1_D2_Dict)
install.packages("meanShiftR")
x=matrix(100,10);
x=matrix(nunif,100,10);
x=matrix(rnorm(100*10,0,1),100,10);
cv1 = cov(x)
xd = x + matrix(100,100,10);
cv1 = cov(xd)
cv1 = cov(x)
cv2 = cov(xd)
View(cv2)
View(cv1)
